#!/usr/bin/env nemesis
"""Generate Cubit journal file to create slab surface from Slab 1.0 contours.

We decimate the contours from Slab 1.0 in order to reduce the complexity of the slab
geometry so that the mesh generation is faster.

The Slab contours (cas_contours_dep.in.txt) can be downloaded from:
https://earthquake.usgs.gov/data/slab/models.php. Note that we have gzipped the file
to reduce its size in the Git repository and we uncompress it on the fly in this script
using the gzip Python module.

The reference for the Slab 1.0 model is:

Hayes, G. P., D. J. Wald, and R. L. Johnson (2012), Slab1.0: A three-dimensional model
of global subduction zone geometries, J. Geophys. Res., 117, B01302, doi:10.1029/2011JB008524.
"""

import numpy

# ----------------------------------------------------------------------
class JournalFile:
    """JournalFile object for writing Cubit journal file.
    """

    def __init__(self, filename):
        self.filename = filename       
        self.file = None 
    
    def write_header(self):
        """Write header for journal file.
        """
        if not self.file:
            self.file = open(self.filename, "w")
        lines = (
            "# Cubit journal file generated by generate_surfjou.py",
            "#\n",
            "# Create ACIS NURBS surfaces for top and bottom of slab.",
            "",
        )
        self._write_lines(lines)

    def new_surface(self):
        lines = (
            "# New surface.",
            "reset",
            "",
        )
        self._write_lines(lines)
    
    def skin_surface(self, filename):
        """Create surface and save it in an ACIS file.
        """
        lines = (
            "# Create surface from curves.",
            "create surface skin curve all",
            "delete curve all",
            "",
            "# Save surface to ACIS file for later use.",
            f"export acis '{filename}' overwrite",
            "",
        )
        self._write_lines(lines)
    
    def add_contour(self, points):
        """Add contour to journal file.
        """
        lines = (
            "# Contour",
            "create vertex x %12.6e y %12.6e z %12.6e" % tuple(points[0]),
            "${pBegin=Id('vertex')}",
        )
        for pt in points[1:]:
            lines += ("create vertex x %12.6e y %12.6e z %12.6e" % tuple(pt),) 
        lines += (
            "${pEnd=Id('vertex')}",
            "create curve spline vertex {pBegin} to {pEnd} delete",
            "",
        )           
        self._write_lines(lines)

    def close(self):
        self.file.close()
        self.file = None

    def _write_lines(self, lines):
        self.file.write("\n".join(lines))
    
    
# ----------------------------------------------------------------------
class SlabContoursFile:
    """SlabContourFile object for reading contours from a Slab 1.0 contour file..
    """

    def __init__(self, filename):
        self.filename = filename
        self.file = None

    def read(self):
        """Read contours from Slab 1.0 file.
        """
        if self.filename.endswith(".gz"):
            import gzip
            with gzip.open(self.filename, "rb") as file:
                lines = file.readlines()
        else:
            with open(self.filename, "r") as file:
                lines = file.readlines()
            
        contours = {}
        points = []
        key = None
        for line in lines:
            if line.decode().strip() == "END":
                contours[key] = numpy.array(points, dtype=numpy.float64)
                points = []
                continue
            if len(line.split()) == 1:
                key = int(line)
                continue
            pt = list(map(float, line.strip().split())) # lon/lat/elev
            points.append([pt[1], pt[0], pt[2]]) # lat/lon/elev
        self.contours = contours

    
# ----------------------------------------------------------------------
class SlabExtender:

    from pythia.pyre.units.length import km
    from pythia.pyre.units.angle import deg

    UP_DIP_ELEV = 1.0*km
    UP_DIP_DIST = 600.0*km
    UP_DIP_ANGLE = 10.0*deg
    FAULT_STRIKE = 0.0*deg
    CONTOURS_STRIDE = 4
    POINTS_STRIDE = 20

    def initialize(self, slab):
        self.contours = slab.contours
        self._decimate(self.POINTS_STRIDE)
        self._toXYZ()
        
    
    def add_up_dip_contours(self):
        """Add contours up-dip from original contours.

        We increase the horizontal distance between the contours at a
        geometric rate. The first contour is at a distance of
        dist_horiz, followed by 2*dist_horiz, 4*dist_horiz, etc.

        The horizontal distance of contour n from the original one is
        (2**(n+1)-1)) * dist_horiz, n=0,1,2,...

        """
        import math
        from pythia.pyre.units.length import m
        
        key = min(self.contours.keys())
        contour_top = self.contours[key]
        z_top = contour_top[0][2]*m

        dist_horiz = (self.UP_DIP_ELEV - z_top) / math.tan(self.UP_DIP_ANGLE)
        dx = -dist_horiz * math.cos(self.FAULT_STRIKE)
        dy = dist_horiz * math.sin(self.FAULT_STRIKE)

        contours_up_dip = {}
        ncontours = int(math.ceil(math.log((self.UP_DIP_DIST/dist_horiz)+1)/math.log(2.0)))
        for i in range(ncontours):
            contour = numpy.array(contour_top)
            contour[:, 0] += (2**i)*dx.value
            contour[:, 1] += (2**i)*dy.value
            contour[:, 2] = self.UP_DIP_ELEV.value
            contours_up_dip[-i] = contour
        self.contours_up_dip = contours_up_dip
    
    def get_contours(self):
        """Get contours for slab surface.
        """
        contours = [self.contours[k] for k in sorted(self.contours.keys())]
        contours_decimated = contours[::self.CONTOURS_STRIDE]
        if (len(contours)-1) % self.CONTOURS_STRIDE:
            contours_decimated += [contours[-1]]
        return contours_decimated

    def get_up_dip_contours(self):
        """Get contours for up-dip extension of slab surface.
        """
        contours_up_dip = [self.contours_up_dip[k] for k in sorted(self.contours_up_dip.keys())]
        return contours_up_dip

    def get_all_contours(self):
        """Get all contours for slab surface.
        """
        contours = self.get_up_dip_contours()
        contours += self.get_contours()
        return contours
    
    def _decimate(self, stride):
        """Decimate the number of points in a contour.
        """
        for key, points in self.contours.items():
            points_decimated = points[::self.POINTS_STRIDE]
            if (len(points)-1) % self.POINTS_STRIDE:
                points_decimated = numpy.vstack((points_decimated, points[-1],))
            self.contours[key] = numpy.ascontiguousarray(points_decimated)
        return 

    def _toXYZ(self):
        """Transform from geographic coordinates and depth in km to geographic
        projected coordinate system. The coordinate system is imported
        from coordsys.py.

        """
        import coordsys
        for points in self.contours.values():
            coordsys.geoToMesh(points)
            points[:, 2] *= 1.0e+3


# ----------------------------------------------------------------------
class SurfaceApp:
    """SurfaceApp object for top-level application workflow.
    """
    JOURNAL_FILENAME = "scratch/cubit_create_surfs.jou"
    CONTOURS_FILENAME = "cas_contours_dep.in.txt.gz"
    SLAB_TOP_FILENAME = "scratch/cubit_surf_slabtop.sat"
    SLAB_BOT_FILENAME = "scratch/cubit_surf_slabbot.sat"
    SPLAY_FILENAME = "scratch/cubit_surf_splay.sat"

    from pythia.pyre.units.length import km
    from pythia.pyre.units.angle import deg

    SLAB_THICKNESS = 50.0*km
    SLAB_NORMAL_DIR = (+0.209, -0.016, +0.979)

    def __init__(self):
        self.modeler = JournalFile(self.JOURNAL_FILENAME)
        self.contours = SlabContoursFile(self.CONTOURS_FILENAME)
        self.extender = SlabExtender()

    def main(self, *args, **kwds):
        """Open Slab 1.0 input file and journal output file and loop over
        contours.
        """
        self.contours.read()

        self.extender.initialize(self.contours)
        self.extender.add_up_dip_contours()

        self.modeler.write_header()

        # Top of slab
        self.modeler.new_surface()
        for contour in self.extender.get_all_contours():
            self.modeler.add_contour(contour)
        self.modeler.skin_surface(self.SLAB_TOP_FILENAME)

        # Bottom of slab
        self.modeler.new_surface()
        for contour in self.extender.get_up_dip_contours():
            contour[:, 2] = -self.SLAB_THICKNESS.value
            self.modeler.add_contour(contour)
        
        for contour in self.extender.get_contours():
            contour[:, 0] -= self.SLAB_NORMAL_DIR[0]*self.SLAB_THICKNESS.value
            contour[:, 1] -= self.SLAB_NORMAL_DIR[1]*self.SLAB_THICKNESS.value
            contour[:, 2] -= self.SLAB_NORMAL_DIR[2]*self.SLAB_THICKNESS.value
            self.modeler.add_contour(contour)
        self.modeler.skin_surface(self.SLAB_BOT_FILENAME)

        # Splay fault
        self.modeler.new_surface()
        contour = self.extender.contours[15]
        contour[:, 2] -= 8.0e+3
        self.modeler.add_contour(contour)
        contour[:, 2] = 1.0e+3
        contour[:, 0] -= 24.0e+3
        self.modeler.add_contour(contour)
        self.modeler.skin_surface(self.SPLAY_FILENAME)
        
        self.modeler.close()


# ======================================================================
if __name__ == "__main__":
    SurfaceApp().main()

    
# End of file
